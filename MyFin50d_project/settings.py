
"""
Django settings for MyFin50d project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from dotenv import load_dotenv
#from homepage_app.helpers.logging import configure_logging
#import importlib.util
import logging
import os
from pathlib import Path

# Assuming your .env file is at the root of your Django project, adjust the path as necessary
#dotenv_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'gitignored', '.env')
dotenv_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'gitignored', '.env')
load_dotenv(dotenv_path)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
#BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# Use .env file to set project environment, with 'dev' as the fallback
SECRET_KEY = os.getenv('SECRET_KEY')
PROJECT_ENV = os.getenv('ENVIRONMENT', 'development')
ALLOWED_HOSTS = ['localhost', '127.0.0.1', '34.70.192.208']

# Important security-related settings
CSRF_COOKIE_SECURE=True # Must = True for deployment. Sends CSRF cookies only over HTTPS
SECURE_SSL_REDIRECT=True # Must = True for deployment. If user tries to access via http, user is redirected to https
SESSION_COOKIE_HTTPONLY=True  # Must = True for deployment. Prevents client-side JavaScript from accessing the session cookie
SECURE_PROXY_SSL_HEADER=('HTTP_X_FORWARDED_PROTO', 'https')
X_FRAME_OPTIONS = 'DENY' # Must = True for deployment. Prevents framing of the site, equivalent to "frame-ancestors": ["'none'"] in CSP. Can also use 'SELF'


# Set app mode according to setting in .env above
if PROJECT_ENV == 'testing':
    from .configs_project.config_testing import *
elif PROJECT_ENV == 'production':
    from .configs_project.config_prod import *
else:
    from .configs_project.config_dev import *

logger = logging.getLogger('django')

# Sense check of critical settings
print(f'running settings.py ... PROJECT_ENV is: { PROJECT_ENV }')
print(f'running settings.py ... ALLOWED_HOSTS is: { ALLOWED_HOSTS }')
print(f'running settings.py ... DEBUG is: { DEBUG }')


# Application definition
INSTALLED_APPS = [
    # Apps created for this project
    #'brokerage',
    'users', # Manages registration, user profiles, login, passwords
    'utils', # Manages CSP reporting, nonce generation, readiness check
    # Utilities
    'csp',
    # Default Django apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'django_extensions',
]

MIDDLEWARE = [
    'csp.middleware.CspNonceMiddleware', # Added to generate nonces and affix them to HTML headers
    'csp.middleware.CspHeaderMiddleware', # Added to generate nonces and affix them to HTML headers
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = "MyFin50d_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "MyFin50d_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_URL = "static/" # This tells django for look for static files in any folder called 'static'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') #This tells django/whitenoise/gunicorn where to consolidate the static files for easier serving.
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'shared_static'), # Ensures that the contents of shared_static/ are also collected when running 'manage.py collectstatic'
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# CSP Settings
CSP_DEFAULTS = {
"default-src": ["'self'", "https://127.0.0.1:8000", "https://cdn.jsdelivr.net", "https://cdnjs.cloudflare.com", "https://www.googletagmanager.com", "https://www.google-analytics.com"],
    "script-src": ["'self'", "https://127.0.0.1:8000", "https://cdn.jsdelivr.net", "https://code.jquery.com/", "https://www.googletagmanager.com", "https://www.google-analytics.com", "https://substackapi.com", "{nonce}"],
    "style-src": ["'self'", "https://127.0.0.1:8000", "https://cdn.jsdelivr.net", "https://cdnjs.cloudflare.com", "'unsafe-inline'"],
    "img-src": ["'self'", "data:", "https://127.0.0.1:8000", "https://financialmodelingprep.com/", "https://images.unsplash.com", "https://substackcdn.com"],
    "frame-src": ["'self'", "https://www.youtube.com"],
    "connect-src": ["'self'", "https://substackapi.com", "https://www.google-analytics.com"],
    "frame-ancestors": ["'none'"], # Prevents framing of the site, equivalent to setting X_FRAME_OPTIONS = 'DENY'.  "'none'" allows no framing and "'self'" allows self framing 
}

CSP_REPORT_URI = 'utils/csp_violation_report'
CSP_ENABLED = True
CSP_REPORT_ONLY = False  # Set to True if you want to only report violations without enforcing the policy
CSP_REPORT_SAMPLING = 1.0  # Adjust the sampling rate as needed


# Logging configuration
LOG_FILE_PATH = os.path.join(BASE_DIR, 'logs', 'django.log')
LOG_FILE_PATH = os.path.join(BASE_DIR, 'logs', 'django.log')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {},
    'loggers': {
        'django': {
            'level': 'DEBUG',
            'propagate': True,
        },
        'csp_reports': {
            'level': 'ERROR',
            'propagate': False,
        },
    },
}

if log_to_file:
    LOGGING['handlers']['file'] = {
        'level': 'DEBUG',
        'class': 'logging.handlers.RotatingFileHandler',
        'filename': LOG_FILE_PATH,
        'maxBytes': 10 * 1024 * 1024,  # 10 MB
        'backupCount': 5,
        'formatter': 'verbose',
    }
    # Only add 'file' handler to loggers if it's defined
    LOGGING['loggers']['django']['handlers'] = ['file']

if log_to_terminal:
    LOGGING['handlers']['console'] = {
        'level': 'DEBUG',
        'class': 'logging.StreamHandler',
        'formatter': 'verbose',
    }

# If 'csp_file' handler is to be used, ensure it's defined
if 'csp_file' in LOGGING['loggers']['csp_reports'].get('handlers', []):
    LOGGING['handlers']['csp_file'] = {
        'level': 'ERROR',
        'class': 'logging.FileHandler',
        'filename': LOG_FILE_PATH,
        'formatter': 'verbose',
    }




# Added to allow for authentication based on user's email
AUTHENTICATION_BACKENDS = [
    'MyFin50d_project.authentication_backend.EmailAuthBackend',  # Update this to the actual path of the backend
    'django.contrib.auth.backends.ModelBackend',  # Default ModelBackend for admin and others
]

# Added to make the template file in project_templates/ available to all apps
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'project_templates'],  
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',  # Ensure this is included
                'django.contrib.auth.context_processors.auth',  # Ensure this is included
                'django.contrib.messages.context_processors.messages',  # Ensure this is included
                'django.template.context_processors.media',
                ],
        },
    },
]